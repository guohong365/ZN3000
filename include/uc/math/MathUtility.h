
#pragma once
#include <uc/libuc.h>
#include <math.h>
#include <GdiPlus.h>
#ifdef ROTATE_PI
#undef ROTATE_PI
#endif                          // ROTATE_PI

#define ROTATE_PI  double (3.1415926535897932384626433832795)

class LIB_UC_API MathUtility
{
  public:

      ///////////////////////////////////////////////////////////////////////////////
      ///  public static  CalculateLineAngle
      ///  计算直线段与x轴的夹角
      ///
      ///  @param [in]       x1 double     起点x坐标
      ///  @param [in]       y1 double     起点y坐标
      ///  @param [in]       x2 double     终点x坐标
      ///  @param [in]       y2 double     终点y坐标
      ///
      ///  @return double 直线段与x轴的夹角（-90度―90度）
      ///
      ///  @author 郭鸿 @date 2008-11-18
      ///////////////////////////////////////////////////////////////////////////////
      /////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
      static double CalculateLineAngle(double x1, double y1, double x2, double y2);

      ///////////////////////////////////////////////////////////////////////////////
      ///  public static  CalculateCorrectParameter
      ///  计算梯形校正参数
      ///
      ///  @param [in]       x0 const double *    图像中任意四点x坐标
      ///  @param [in]       y0 const double *    图像中任意四点y坐标，顺序与x坐标对应
      ///  @param [in]       x1 const double *    图像中四点校正后的x坐标
      ///  @param [in]       y1 const double *    图像中四点校正后的y坐标，顺序与x坐标对应
      ///  @param [out]  k double *    校正参数
      ///
      ///  @return bool 找到正确K，返回true，否则返回false
      ///
      ///  @author 郭鸿 @date 2008-11-18
      ///////////////////////////////////////////////////////////////////////////////
      /////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
      static bool CalculateCorrectParameter(const double *x0, const double *y0, const double *x1, const double *y1, double *k);

      static void CalculatePrespectiveCoordinate(const double * k, double x0, double y0, double &x, double &y);
      static void CalculatePrespectiveCoordinate(const double * k, const double *x0, const double *y0, double * x, double *y, long count=1);


      ///////////////////////////////////////////////////////////////////////////////
      ///  public static  RGauss
      ///  高斯消元，求线性方程组根
      ///
      ///  @param [in]       n int     方程个数
      ///  @param [in]       a const double *    系数
      ///  @param [in]       b const double *    常数项
      ///  @param [out]  x double *    根
      ///
      ///  @return int 成功返回1，失败返回0
      ///
      ///  @author 郭鸿 @date 2008-11-18
      ///////////////////////////////////////////////////////////////////////////////
      /////// comment generated by CommentMakerPro from www.FeinSoftware.com ////////
      static int RGauss(int n, const double *a, const double *b, double *x);
};
double DistanceP2P(Gdiplus::Point from, Gdiplus::Point to);
double DistanceP2HL(Gdiplus::Point from, Gdiplus::Point p1, Gdiplus::Point p2);
double DistanceP2VL(Gdiplus::Point from, Gdiplus::Point p1, Gdiplus::Point p2);
float GetRatio(Gdiplus::Size source, Gdiplus::Size target);
float GetRatio(Gdiplus::SizeF source, Gdiplus::SizeF target);